{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMInt8iCaR60EU8w+PSomPE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rafidannovianto/python/blob/main/tugas%20pertemuan%2011\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c80vuuRa4phZ"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UudIEGQS5LvD",
        "outputId": "a3897b98-1f4b-4300-ce53-97a9f19176d9"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ov-pGTkn5YDU",
        "outputId": "0905ba00-74ce-40cc-97e2-cd957201dbb7"
      },
      "source": [
        "cd /content/drive/MyDrive/Colab Notebooks"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/Colab Notebooks\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Za6UKHPz5eBt",
        "outputId": "f970828b-75a3-4895-d9ad-7fadf6e21c2d"
      },
      "source": [
        "ls"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[0m\u001b[01;34m3scene\u001b[0m/          \u001b[01;34mdataset\u001b[0m/        Untitled0.ipynb\n",
            "coast_test1.jpg  \u001b[01;34mnnmodel_scene\u001b[0m/  Untitled1.ipynb\n",
            "coast_test.jpg   Untitled        Untitled2.ipynb\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qVRPanrq5fkC"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers.core import Activation\n",
        "from keras.layers.core import Flatten\n",
        "from keras.layers.core import Dense\n",
        "from keras.optimizers import Adam\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from PIL import Image\n",
        "from imutils import paths\n",
        "import numpy as np\n",
        "import os"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5kvY7VAc5mq6",
        "outputId": "538165e8-2026-4f73-a7fe-c7c5ec18b05c"
      },
      "source": [
        "print(\"[INFO] loading images...\")\n",
        "imagePaths = paths.list_images(\"dataset\")\n",
        "data = []\n",
        "labels = []"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] loading images...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TW5RgFWg5ruY"
      },
      "source": [
        "for imagePath in imagePaths:\n",
        "\timage = Image.open(imagePath)\n",
        "\n",
        "\timage = np.array(image.resize((64, 64))) / 255.0 \n",
        "\tdata.append(image)\n",
        "\n",
        "\tlabel = imagePath.split(os.path.sep)[-2]\n",
        "\tlabels.append(label)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OXWVJ5KK7nh5",
        "outputId": "ab82b295-e47e-4215-ca73-fdd9d5a2e0aa"
      },
      "source": [
        "print(labels)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VkgIvqL37q2I"
      },
      "source": [
        "lb = LabelBinarizer()\n",
        "labels = lb.fit_transform(labels)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "05iW1sJs7uLB",
        "outputId": "a15a8444-3ef4-4a8a-d141-9fcca2ab114c"
      },
      "source": [
        "print(labels)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0 1 0 0 0]\n",
            " [0 1 0 0 0]\n",
            " [0 1 0 0 0]\n",
            " ...\n",
            " [1 0 0 0 0]\n",
            " [1 0 0 0 0]\n",
            " [1 0 0 0 0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FuPsqORu7yWX",
        "outputId": "05d9e00a-403a-4817-de67-37898b7889d0"
      },
      "source": [
        "(trainX, testX, trainY, testY) = train_test_split(np.array(data),\tnp.array(labels), test_size=0.25, shuffle=True)\n",
        "print(trainX.shape)\n",
        "print(testX.shape)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(445, 64, 64, 3)\n",
            "(149, 64, 64, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrISO0cL71ZK",
        "outputId": "5269b120-3270-45f4-96ae-14d8b4df6abc"
      },
      "source": [
        "from keras.layers import Convolution2D, MaxPooling2D\n",
        "from keras.models import Sequential\n",
        "from keras.layers.core import Flatten, Dense\n",
        "\n",
        "model1 = Sequential()\n",
        "model1.add(Convolution2D(16, (8,8), activation='relu', input_shape=(64,64,3)))\n",
        "model1.add(MaxPooling2D(2,2))\n",
        "model1.add(Convolution2D(25, (8,8), activation='relu'))\n",
        "model1.add(MaxPooling2D(2,2))\n",
        "\n",
        "model1.add(Flatten())\n",
        "model1.add(Dense(100, activation='relu'))\n",
        "model1.add(Dense(15, activation='relu'))\n",
        "model1.add(Dense(15, activation='relu'))\n",
        "model1.add(Dense(5, activation='softmax'))\n",
        "\n",
        "model1.summary()"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_29\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_60 (Conv2D)           (None, 57, 57, 16)        3088      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_56 (MaxPooling (None, 28, 28, 16)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_61 (Conv2D)           (None, 21, 21, 25)        25625     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_57 (MaxPooling (None, 10, 10, 25)        0         \n",
            "_________________________________________________________________\n",
            "flatten_25 (Flatten)         (None, 2500)              0         \n",
            "_________________________________________________________________\n",
            "dense_109 (Dense)            (None, 100)               250100    \n",
            "_________________________________________________________________\n",
            "dense_110 (Dense)            (None, 15)                1515      \n",
            "_________________________________________________________________\n",
            "dense_111 (Dense)            (None, 15)                240       \n",
            "_________________________________________________________________\n",
            "dense_112 (Dense)            (None, 5)                 80        \n",
            "=================================================================\n",
            "Total params: 280,648\n",
            "Trainable params: 280,648\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mIdGbL5o8KNV",
        "outputId": "1d74c318-afdf-4059-a16e-0b4609982d20"
      },
      "source": [
        "print(\"[INFO] training network...\")\n",
        "opt = Adam(lr=1e-3, decay=1e-3 / 50)\n",
        "model1.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n",
        "H = model1.fit(trainX, trainY, validation_data=(testX, testY), epochs=27, batch_size=35)"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] training network...\n",
            "Epoch 1/27\n",
            "13/13 [==============================] - 4s 270ms/step - loss: 1.6087 - accuracy: 0.2067 - val_loss: 1.6185 - val_accuracy: 0.1544\n",
            "Epoch 2/27\n",
            "13/13 [==============================] - 3s 259ms/step - loss: 1.5714 - accuracy: 0.2472 - val_loss: 1.5848 - val_accuracy: 0.3221\n",
            "Epoch 3/27\n",
            "13/13 [==============================] - 3s 260ms/step - loss: 1.5546 - accuracy: 0.3056 - val_loss: 1.5561 - val_accuracy: 0.3624\n",
            "Epoch 4/27\n",
            "13/13 [==============================] - 3s 257ms/step - loss: 1.5050 - accuracy: 0.3438 - val_loss: 1.5242 - val_accuracy: 0.4295\n",
            "Epoch 5/27\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 1.4800 - accuracy: 0.3730 - val_loss: 1.4742 - val_accuracy: 0.4027\n",
            "Epoch 6/27\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 1.3853 - accuracy: 0.4360 - val_loss: 1.3432 - val_accuracy: 0.4430\n",
            "Epoch 7/27\n",
            "13/13 [==============================] - 3s 258ms/step - loss: 1.3020 - accuracy: 0.4607 - val_loss: 1.2467 - val_accuracy: 0.4564\n",
            "Epoch 8/27\n",
            "13/13 [==============================] - 3s 258ms/step - loss: 1.1469 - accuracy: 0.5303 - val_loss: 1.1811 - val_accuracy: 0.5906\n",
            "Epoch 9/27\n",
            "13/13 [==============================] - 3s 262ms/step - loss: 1.0557 - accuracy: 0.5820 - val_loss: 1.0419 - val_accuracy: 0.6174\n",
            "Epoch 10/27\n",
            "13/13 [==============================] - 3s 260ms/step - loss: 1.0011 - accuracy: 0.6000 - val_loss: 1.2071 - val_accuracy: 0.5839\n",
            "Epoch 11/27\n",
            "13/13 [==============================] - 3s 262ms/step - loss: 0.9251 - accuracy: 0.6157 - val_loss: 1.0566 - val_accuracy: 0.6846\n",
            "Epoch 12/27\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.8182 - accuracy: 0.6517 - val_loss: 0.9806 - val_accuracy: 0.6510\n",
            "Epoch 13/27\n",
            "13/13 [==============================] - 3s 260ms/step - loss: 0.7459 - accuracy: 0.7101 - val_loss: 0.9373 - val_accuracy: 0.6913\n",
            "Epoch 14/27\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 0.7163 - accuracy: 0.7056 - val_loss: 0.8920 - val_accuracy: 0.7517\n",
            "Epoch 15/27\n",
            "13/13 [==============================] - 3s 259ms/step - loss: 0.7081 - accuracy: 0.7191 - val_loss: 0.8728 - val_accuracy: 0.6846\n",
            "Epoch 16/27\n",
            "13/13 [==============================] - 3s 258ms/step - loss: 0.6603 - accuracy: 0.7461 - val_loss: 0.9855 - val_accuracy: 0.6980\n",
            "Epoch 17/27\n",
            "13/13 [==============================] - 3s 262ms/step - loss: 0.6016 - accuracy: 0.7506 - val_loss: 1.0734 - val_accuracy: 0.6711\n",
            "Epoch 18/27\n",
            "13/13 [==============================] - 3s 260ms/step - loss: 0.5552 - accuracy: 0.7663 - val_loss: 0.7767 - val_accuracy: 0.7517\n",
            "Epoch 19/27\n",
            "13/13 [==============================] - 3s 256ms/step - loss: 0.4844 - accuracy: 0.8022 - val_loss: 0.8227 - val_accuracy: 0.7584\n",
            "Epoch 20/27\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.4369 - accuracy: 0.8180 - val_loss: 0.8867 - val_accuracy: 0.7181\n",
            "Epoch 21/27\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 0.4420 - accuracy: 0.8225 - val_loss: 0.8249 - val_accuracy: 0.7718\n",
            "Epoch 22/27\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.4014 - accuracy: 0.8449 - val_loss: 0.8770 - val_accuracy: 0.7315\n",
            "Epoch 23/27\n",
            "13/13 [==============================] - 3s 264ms/step - loss: 0.3707 - accuracy: 0.8517 - val_loss: 1.0003 - val_accuracy: 0.6779\n",
            "Epoch 24/27\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 0.4214 - accuracy: 0.8202 - val_loss: 1.1088 - val_accuracy: 0.6980\n",
            "Epoch 25/27\n",
            "13/13 [==============================] - 3s 266ms/step - loss: 0.4067 - accuracy: 0.8292 - val_loss: 0.9683 - val_accuracy: 0.7181\n",
            "Epoch 26/27\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 0.3891 - accuracy: 0.8337 - val_loss: 1.0552 - val_accuracy: 0.7181\n",
            "Epoch 27/27\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.3298 - accuracy: 0.8517 - val_loss: 0.8270 - val_accuracy: 0.8054\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "id": "aVbqFDzQ--Fa",
        "outputId": "d0f11051-18b6-4ed7-d6b3-45c81b4abcb2"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(H.history.keys())\n",
        "\n",
        "plt.plot(H.history['accuracy'])\n",
        "plt.plot(H.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "plt.plot(H.history['loss'])\n",
        "plt.plot(H.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F_vB0pXI_CmP",
        "outputId": "6155cac7-3852-430a-f55a-e55ff3b5a2b2"
      },
      "source": [
        "print(\"[INFO] evaluating network...\")\n",
        "predictions = model1.predict(testX, batch_size=32)\n",
        "print(classification_report(testY.argmax(axis=1),\n",
        "\tpredictions.argmax(axis=1), target_names=lb.classes_))"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating network...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      GMB_02       0.83      0.88      0.85        40\n",
            "      GMB_04       0.77      0.71      0.74        34\n",
            "      GMB_05       0.76      0.93      0.83        27\n",
            "      GMB_06       0.84      0.70      0.76        23\n",
            "      GMB_08       0.83      0.80      0.82        25\n",
            "\n",
            "    accuracy                           0.81       149\n",
            "   macro avg       0.81      0.80      0.80       149\n",
            "weighted avg       0.81      0.81      0.80       149\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}